AWSTemplateFormatVersion: "2010-09-09"
#aws cloudformation create-stack  --stack-name cloud-formation-template-stack --template-body file://fullstack.yaml
Description: >
  create a vpc which has 2 public and 2 private subnets

Metadata:
  AWS:CloudFormation::Interface:
    ParameterGRoups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VpcCIDR
      -
        Label:
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR  
          - PrivateSubnet1CIDR  
          - PrivateSubnet2CIDR  
      -
        Label:
          default: "SSH CIDR"
        Parameters:
          - SSHLocation

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Enter IP range for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: Enter IP range for this Public Subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: Enter IP range for this Public Subnet 2
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.2.0/24
    Description: Enter IP range for this Private Subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.3.0/24
    Description: Enter IP range for this Private Subnet 2
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: vaild IP CIDR range of x.x.x.x/x
    Default: 0.0.0.0/0
    Description: IP address range that can be used the access the web server using SSH
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
  # Create VPC
  VPC: #this line is the name of the resource
    # is the type of resource
    Type: AWS::EC2::VPC 
    Properties:
      #!Ref Parametername is called intrinsic function
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Cloud Formation VPC

  #Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Cloud Formation InternetGateway

  #Attach Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  #Beginning of Section for Public Resources
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: PublicSubnet1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: PublicSubnet2
      VpcId: !Ref VPC
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: PublicRouteTable
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      #CarrierGatewayId: String
      DestinationCidrBlock: 0.0.0.0/0
      #EgressOnlyInternetGatewayId: String
      GatewayId: !Ref InternetGateway
      # InstanceId: String
      # LocalGatewayId: String
      # NatGatewayId: String
      # NetworkInterfaceId: String
      RouteTableId: !Ref PublicRouteTable
      # TransitGatewayId: String
      # VpcEndpointId: String
      # VpcPeeringConnectionId: String

  PublicSubnet1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      #determines if is public for private
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PrivateSubnet1
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      #determines if is public for private
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PrivateSubnet2
      VpcId: !Ref VPC

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https to client host access on port 80/443
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSHSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: SSH Security Group
          
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP(S) access with ports 80/443 exclusive ot the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress: #Theses blocks are equavilent to creating a rules for the security groups
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: Web Server Security Group

  DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DataBase Security GRoup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: DataBase Security Group

Outputs:
  # Top Line Logical ID Name
  VPC:
    Description: VPC ID
    Export:
      # returns {stackname}-vpc
      Name: !Sub ${AWS::StackName}-VPC 
    Value: !Ref VPC

  PublicSubnet1: 
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1 
    Value: !Ref PublicSubnet1   

  PublicSubnet2: 
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2 

  PrivateSubnet1: 
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2  

  ALBSecurityGroup:
    Description: ALBSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup  

  SSHSecurityGroup:
    Description: SSHSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup  

  WebServerSecurityGroup:
    Description: WebServerSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup  

  DataBaseSecurityGroup:
    Description: DataBaseSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
    Value: !Ref DataBaseSecurityGroup  