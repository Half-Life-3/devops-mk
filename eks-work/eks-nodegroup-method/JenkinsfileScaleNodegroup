//this pipeline is designed to run every 2 minutes
pipeline{
    agent any
    stages{
        stage('AWS Login') {
			steps{
                sh(returnStdout: true, script:'sh aws_login.sh')
			}
		}
        stage('Check CloudWatch'){
            steps{
                script{
                    try{
                        // Possible value are OK, ALARM and INSUFFICIENT_DATA
                        StateValue = sh(returnStdout: true, script: "aws cloudwatch describe-alarms --alarm-names Bank_Overload | grep StateValue: | grep -E -o [^StateValue:] | tr -d '\n'")
                        minNodes = 1 // make these env variables later
                        MaxNodes = 3
                        //currentNodeAmt = sh(returnStdout: true, script: "kubectl describe nodes | grep -c mng-group")
                        sh 'kubectl describe nodes'
                        //currentNodeAmt = currentNodeAmt / 2
                        //echo $currentNodeAmt
                        if(StateValue.trim().equals("ALARM")){
                            //scale group
                            echo "StateValue is ALARM scaling up node group"
                            // if(currentNodeAmt < MaxNodes){
                            //     newNodeAmt = currentNodeAmt + 1
                            //     sh 'eksctl scale nodegroup --cluster=myeks-nodegroup --nodes=$newNodeAmt --name=mng-group'
                            // }
                            // else{
                            //     echo "MaxNodes already allotted can not scale node group any more"
                            // }
                        }
                        else if(StateValue.trim().equals("INSUFFICIENT_DATA")){
                            // INSUFFICIENT_DATA look more closely at cluster
                            echo "StateValue is INSUFFICIENT_DATA look more closely at cluster"
                        }
                        else{
                            // StateValue is OK nothing to do
                            echo "StateValue is OK"
                        }
                    }
                    catch(all){
                        error "could not describe cloud watch alarm Bank_Overload"
                    }
                }
            }
        }
    }
}